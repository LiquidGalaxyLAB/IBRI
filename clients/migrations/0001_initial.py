# -*- coding: utf-8 -*-
# Generated by Django 1.9.1 on 2016-06-13 09:37
from __future__ import unicode_literals

import django.core.validators
from django.db import migrations, models
import encrypted_fields.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Clients',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', encrypted_fields.fields.EncryptedCharField(max_length=50, verbose_name=b'First Name')),
                ('lastname', encrypted_fields.fields.EncryptedCharField(max_length=50, verbose_name=b'Last Name')),
                ('email', encrypted_fields.fields.EncryptedEmailField(max_length=100, verbose_name=b'Email address')),
                ('identifier', encrypted_fields.fields.EncryptedCharField(max_length=9, unique=True, verbose_name=b'Identifier')),
                ('physicalCode', encrypted_fields.fields.EncryptedCharField(max_length=32, unique=True, verbose_name=b'Physical Code')),
                ('address', encrypted_fields.fields.EncryptedCharField(blank=True, max_length=100)),
                ('city', encrypted_fields.fields.EncryptedCharField(blank=True, max_length=100)),
                ('mobileNumber', encrypted_fields.fields.EncryptedCharField(max_length=20, validators=[django.core.validators.RegexValidator(message=b"Phone number must be entered in the format: '+34612345678' or '612345678'.", regex=b'^\\+?\\d{9,12}?$')], verbose_name=b'Mobile Phone Number')),
                ('phoneNumber', encrypted_fields.fields.EncryptedCharField(blank=True, max_length=20, validators=[django.core.validators.RegexValidator(message=b"Phone number must be entered in the format: '+34612345678' or '612345678'.", regex=b'^\\+?\\d{9,12}?$')], verbose_name=b'Contact Phone Number')),
                ('birthDate', encrypted_fields.fields.EncryptedDateField(verbose_name=b'Birth Date')),
                ('postalCode', encrypted_fields.fields.EncryptedCharField(blank=True, max_length=10, verbose_name=b'Postal Code')),
                ('alergies', encrypted_fields.fields.EncryptedCharField(blank=True, max_length=500, verbose_name=b'Alergies')),
                ('diseases', encrypted_fields.fields.EncryptedCharField(blank=True, max_length=500, verbose_name=b'Diseases')),
                ('inseach', encrypted_fields.fields.EncryptedBooleanField(default=False, verbose_name=b'In search')),
                ('bloodType', encrypted_fields.fields.EncryptedCharField(blank=True, choices=[(b'O-', b'O negative'), (b'O+', b'O positive'), (b'B-', b'B negative'), (b'B+', b'B positive'), (b'A-', b'A negative'), (b'A+', b'A positive'), (b'AB-', b'AB negative'), (b'AB+', b'AB positive')], max_length=3)),
                ('contacts', models.ManyToManyField(blank=True, related_name='_clients_contacts_+', to='clients.Clients')),
            ],
            options={
                'verbose_name': 'Client',
                'verbose_name_plural': 'Clients',
            },
        ),
    ]
